/**
 * üèéÔ∏èüí® FAF TURBO - Analyze Endpoint
 *
 * Like GitHub Copilot's backend:
 * - Receives workflow files from CLI
 * - Runs Universal Intelligence Pattern on SERVER
 * - Returns .faf files
 *
 * Intelligence lives HERE (can't be stolen from CLI)
 */

import { json } from '@sveltejs/kit';
import type { RequestHandler } from './$types';
import { findLicenseByKey, updateLastValidated } from '$lib/license-store';

interface AnalyzeRequest {
    licenseKey: string;
    fileContent: string;
    fileName: string;
    fileType?: 'n8n' | 'openai' | 'make' | 'opal' | 'auto';
}

interface AnalyzeResponse {
    success: boolean;
    fafContent?: string;
    score?: number;
    pattern?: string;
    error?: string;
    message?: string;
}

/**
 * Validate license and check if active
 */
async function validateLicense(key: string): Promise<{ valid: boolean; message?: string }> {
    if (!key || !key.startsWith('FAF-')) {
        return { valid: false, message: 'Invalid license key format' };
    }

    try {
        const license = await findLicenseByKey(key);

        if (!license) {
            return { valid: false, message: 'License key not found' };
        }

        if (license.status !== 'active') {
            return { valid: false, message: `License is ${license.status}. Please renew at faf.one/pricing` };
        }

        // Update last validated timestamp
        await updateLastValidated(key);

        return { valid: true };
    } catch (error) {
        console.error('License validation error:', error);
        return { valid: false, message: 'License validation failed' };
    }
}

/**
 * TODO: Import and use actual TURBO intelligence
 *
 * This will import from faf-turbo package:
 * import { generateFafFromAny } from 'faf-turbo-core';
 *
 * For now, placeholder implementation
 */
async function analyzeWithTURBO(
    fileContent: string,
    fileName: string,
    fileType?: string
): Promise<{ fafContent: string; score: number; pattern: string }> {

    // TODO: Replace with actual Universal Intelligence Pattern
    // const result = await generateFafFromAny(fileContent, fileType);

    // Placeholder response
    const fafContent = `# ${fileName}.faf
# Generated by FAF TURBO

version: 3.0.1
faf_score: 85
type: ${fileType || 'auto-detected'}

project:
  name: "${fileName}"
  type: "automation-workflow"
  goal: "AI-powered automation"

human_context:
  who: "Developer"
  what: "${fileName}"
  why: "Automation workflow"
  where: "Production"
  when: "Active"
  how: "TURBO analysis"

scores:
  faf_score: 85
  ai_compatibility_score: 85
  completeness_score: 85

generated: "${new Date().toISOString()}"
faf_version: "3.0.1"

# TODO: Full Universal Intelligence Pattern implementation
# This is a placeholder until TURBO intelligence is moved to server
`;

    return {
        fafContent,
        score: 85,
        pattern: 'Universal Intelligence Pattern (placeholder)'
    };
}

/**
 * POST /api/turbo-analyze
 *
 * Called by faf-turbo CLI to analyze workflows
 */
export const POST: RequestHandler = async ({ request }) => {
    try {
        const body: AnalyzeRequest = await request.json();

        // Validate inputs
        if (!body.licenseKey) {
            return json({
                success: false,
                error: 'License key required'
            } as AnalyzeResponse, { status: 401 });
        }

        if (!body.fileContent || !body.fileName) {
            return json({
                success: false,
                error: 'File content and name required'
            } as AnalyzeResponse, { status: 400 });
        }

        // Validate license
        const licenseCheck = await validateLicense(body.licenseKey);

        if (!licenseCheck.valid) {
            return json({
                success: false,
                error: 'Invalid or expired license',
                message: licenseCheck.message
            } as AnalyzeResponse, { status: 403 });
        }

        // Analyze with TURBO (server-side intelligence)
        const result = await analyzeWithTURBO(
            body.fileContent,
            body.fileName,
            body.fileType
        );

        return json({
            success: true,
            fafContent: result.fafContent,
            score: result.score,
            pattern: result.pattern,
            message: 'Analysis complete'
        } as AnalyzeResponse);

    } catch (error) {
        console.error('‚ùå TURBO analyze error:', error);

        return json({
            success: false,
            error: 'Analysis failed',
            message: error instanceof Error ? error.message : 'Unknown error'
        } as AnalyzeResponse, { status: 500 });
    }
};
